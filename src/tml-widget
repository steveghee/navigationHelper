<div ng-repeat="obj in helper.tunnel_objects">
  <twx-dt-model id="{{obj.name}}" 
                 x="0" y="0" z="0" 
                rx="0" ry="0" rz="0" 
               src="{{obj.src}}" 
            hidden="true"
           opacity="1.0"
            shader="fogged"
  >
  </twx-dt-model>
</div>
<div ng-repeat="obj in helper.nav_objects">
  <twx-dt-model id="{{obj.name}}" 
                 x="0" y="0" z="0" 
                rx="0" ry="0" rz="0"
               src="{{obj.src}}" 
            hidden="true"
           opacity="1.0"
  >
  </twx-dt-model>
</div>
<div ng-repeat="obj in helper.nav_images">
  <twx-dt-image id="{{obj.name}}" 
                 x="0" y="0" z="0" 
                rx="-90" ry="0" rz="0"                           
            height="0.5" width="0.5"
               src="{{obj.src}}" 
            hidden="true"
           opacity="1.0"
            shader="pinger"
  >
  </twx-dt-model>
</div>

<script name="shaded" type="x-shader/x-fragment">
  precision mediump float;
  const float PI=3.1415926; 
  varying vec3 vertex;
  varying vec3 normal;
  varying vec2 texcoord;
  varying vec4 vcolor;
  varying float dist;
			  
  uniform sampler2D tex0;
  uniform vec4 surfaceColor;

  const vec4 ambientColor = vec4(0.15, 0.15, 0.15, 1.0); 
  const vec4 specColor    = vec4(0.05, 0.05, 0.05, 1.0);
  void main() {
    vec4 color = vec4(1.,.5,.25,1.); //orange 
				 
    vec3 lightPos    = vec3(1.,1.,1.);
    vec3 lightDir    = -normalize(lightPos);
    vec3 finalNormal = normalize(normal);
				
    float lambertian = dot(lightDir,finalNormal);
    float specular   = 0.0;
    vec3 viewDir     = normalize(-vertex);

    if (lambertian < 0.0) 
      finalNormal = - finalNormal;

    vec3 reflectDir = reflect(-lightDir, finalNormal);
    float specAngle = max(dot(reflectDir, viewDir), 0.0);
    specular        = pow(specAngle, 4.0);

    color = ambientColor * color + color * abs(lambertian) ; 
					
    color.a = 1. - smoothstep(.8,.4,dist);
    gl_FragColor = vec4(color);
  }
</script>
<script name="shaded" type="x-shader/x-vertex">
  attribute vec3 vertexPosition;
  attribute vec3 vertexNormal;
  attribute vec2 vertexTexCoord;
			
  varying vec2  texcoord;
  varying vec3  normal;  
  varying vec3  vertex;
  varying float dist;
  
  uniform mat4 modelViewProjectionMatrix;
  uniform mat4 modelViewMatrix;
  uniform mat4 normalMatrix;

  void main() {
    vec4 vp = vec4(vertexPosition, 1.0);
    gl_Position = modelViewProjectionMatrix * vp;
    normal      = vec3(normalize(normalMatrix * vec4(vertexNormal,0.0)));
    texcoord    = vertexTexCoord;
    vertex      = vp.xyz;
    vec3 vv     = vec3(modelViewMatrix * vp);
    dist        = length(vv);
  }
</script>

<script name="pinger" type="x-shader/x-vertex">
  attribute vec4 vertexPosition; 
  attribute vec2 vertexTexCoord;

  varying vec2 texcoord;

  uniform mat4 modelViewProjectionMatrix; 
  void main() { 
    gl_Position=vec4(modelViewProjectionMatrix * vertexPosition);
    texcoord = vertexTexCoord - 0.5;
  }
</script>
<script name="pinger" type="x-shader/x-fragment">
  precision mediump float;
  
  const float PI=3.1415926; 
  
  varying vec2 texcoord;

  uniform float rings; 
  uniform float fade;
  uniform float rate;
  uniform float direction;
  uniform float r;
  uniform float g;
  uniform float b;
  uniform float tick;

  uniform sampler2D texSampler2D;
  uniform vec4      surfaceColor;

  void main() {
    float viz   = 1. - fade;
    float wrap  = 2. * PI;
    float speed = (direction < 0.) ? 1.+rate : -1.-rate;   // note there is a default speed (1) and the rate then adjusts it
    float o     = speed * mod(tick,wrap);
    float l     = length(texcoord) * PI;
    float freq  = max(rings * 2.,1.);
    float fr    = o + (l * freq);
    float a1    = sin(fr);
    float a2    = clamp(cos(l),0.,1.); // edge fade is a cosine
    float a     = viz * a1 * a2;

    vec3 c = vec3(r,g,b);     
    if (length(c) == 0.) c=vec3(0.,1.,0.);  //thingview bug - should be surfaceColor.xyz; //

    // our primary image is passed in the texture 
    vec4 tx1 = texture2D(texSampler2D,(texcoord + 0.5));
    // we then composite the pinger into this image - anything NOT alpha=1 is replaced with the pinger effect
    if (tx1.a >= 1.) { 
      c = tx1.rgb;
      a = viz;
    }
    if (a<0.) discard;
    else gl_FragColor=vec4(c,a);
  }
</script>

<script name="fogged" type="x-shader/x-fragment">
  precision mediump float;
  
  varying vec2 texCoord;
  varying float dist;

  uniform sampler2D img;
  uniform float fade;
  uniform float r;
  uniform float g;
  uniform float b;
  uniform vec4  surfaceColor;

  void main(void) {
    vec3 fcol = vec3(r,g,b);
    if (length(fcol) <= 0.) 
      fcol = vec3(0.92,0.87,0.);
      
    vec3 tcol = .5 * fcol;
    vec4 tx   = mix(vec4(fcol,.5),vec4(tcol,.5),dist/4.);
    float dd  = 1. - smoothstep(1.5,.6,dist);
    float aa  = dd * tx.a;
    vec4 wt   = vec4(1.,1.,1.,aa);
    if (aa <= 0.) discard; 
    else gl_FragColor = mix(wt,tx,dd);
  }
</script>
<script name="fogged" type="x-shader/x-vertex">
  attribute vec3 vertexPosition;
  attribute vec2 vertexTexCoord;

  varying vec2  texCoord;
  varying float dist;

  uniform mat4 modelViewProjectionMatrix;
  uniform mat4 modelViewMatrix;
  uniform mat4 modelMatrix;
  uniform mat4 normalMatrix;
  void main() {
    vec4 vertexNormal = vec4(0.,0.,1.,0.);
    
    vec4 vp     = vec4(vertexPosition, 1.0);
    gl_Position = modelViewProjectionMatrix * vp;
    texCoord    = vertexTexCoord;
    vec3 vv     = vec3(modelViewMatrix * vp);
    dist        = length(vv);
  }
</script>
<script name="foggedLit" type="x-shader/x-fragment">
  precision mediump float;
  
  varying vec3  vertex;
  varying vec3  normal;
  varying float dist;

  uniform float fade;
  uniform vec4  surfaceColor;

  const vec4 ambientColor = vec4(0.15, 0.15, 0.15, 1.0); 
  const vec4 specColor    = vec4(0.05, 0.05, 0.05, 1.0);
				 
  void main(void) {
    vec4 color = surfaceColor;
  
    vec3 lightPos    = vec3(1.,1.,1.);
    vec3 lightDir    = -normalize(lightPos);
    vec3 finalNormal = normalize(normal);
				
    float lambertian = dot(lightDir,finalNormal);
    float specular   = 0.0;
    vec3 viewDir     = normalize(-vertex);

    if (lambertian < 0.0) 
      finalNormal = - finalNormal;

    vec3 reflectDir = reflect(-lightDir, finalNormal);
    float specAngle = max(dot(reflectDir, viewDir), 0.0);
    specular        = pow(specAngle, 4.0);

    color = ambientColor * color +	
                   color * abs(lambertian)   +   
	       specColor * specular;
					
    color.a = 1. - smoothstep(1.5,.6,dist);
    gl_FragColor=vec4(color);
  }
</script>
<script name="foggedLit" type="x-shader/x-vertex">
  attribute vec3 vertexPosition;
  attribute vec3 vertexNormal;

  varying vec3  vertex;
  varying vec3  normal;
  varying float dist;

  uniform mat4 modelViewProjectionMatrix;
  uniform mat4 modelViewMatrix;
  uniform mat4 modelMatrix;
  uniform mat4 normalMatrix;
  void main() {
    vec4 vp     = vec4(vertexPosition, 1.0);
    gl_Position = modelViewProjectionMatrix * vp;
    normal      = vec3(normalize(normalMatrix * vec4(vertexNormal,0.0)));
    vec3 vv     = vec3(modelViewMatrix * vp);
    dist        = length(vv);
    vertex      = vp.xyz;
  }
</script>
